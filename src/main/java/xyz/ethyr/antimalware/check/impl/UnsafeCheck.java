package xyz.ethyr.antimalware.check.impl;

import java.util.Arrays;
import java.util.concurrent.atomic.AtomicBoolean;
import org.objectweb.asm.Type;
import org.objectweb.asm.tree.LdcInsnNode;
import org.objectweb.asm.tree.MethodInsnNode;
import xyz.ethyr.antimalware.AntiMalware.Plugin;
import xyz.ethyr.antimalware.check.Check;
import xyz.ethyr.antimalware.helper.ASMHelper;

public class UnsafeCheck implements Check {

  /*
  Big unsafe antihack :flushed:
   */

  @Override
  public void check(Plugin plugin) {
    plugin.getClasses().forEach(classNode -> {
      AtomicBoolean found = new AtomicBoolean();

      classNode.methods.forEach(methodNode -> {
        if (methodNode.desc.endsWith("Lsun/misc/Unsafe;")) {
          found.set(true);
        }

        Arrays.stream(methodNode.instructions.toArray())
            .forEach(node -> {
              if (node instanceof LdcInsnNode && ((LdcInsnNode) node).cst instanceof Type
                  && ((Type) ((LdcInsnNode) node).cst).getClassName()
                  .equalsIgnoreCase("sun/misc/Unsafe")) {
                found.set(true);
              } else if (node instanceof MethodInsnNode && ASMHelper
                  .isStringus(node.getPrevious())) {
                MethodInsnNode method = (MethodInsnNode) node;
                if (method.owner.equals("java/lang/Class") && method.name.contains("Field")
                    && ASMHelper.getStringus(node.getPrevious()).equals("theUnsafe")) {
                  found.set(true);
                }
              }
            });
      });

      if (classNode.fields.stream()
          .anyMatch(fieldNode -> fieldNode.desc.equals("Lsun/misc/Unsafe;"))) {
        found.set(true);
      }

      if (found.get()) {
        plugin.addLog(classNode.name + " -> Trying to access UnSafe (Very Dangerous)");
      }
    });
  }
}
