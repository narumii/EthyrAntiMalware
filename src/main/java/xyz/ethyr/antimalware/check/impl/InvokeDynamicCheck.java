package xyz.ethyr.antimalware.check.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import org.objectweb.asm.tree.FieldInsnNode;
import org.objectweb.asm.tree.InvokeDynamicInsnNode;
import org.objectweb.asm.tree.MethodInsnNode;
import xyz.ethyr.antimalware.AntiMalware.Plugin;
import xyz.ethyr.antimalware.check.Check;
import xyz.ethyr.antimalware.helper.ASMHelper;
import xyz.ethyr.antimalware.helper.NumberHelper;

public class InvokeDynamicCheck implements Check {

  /*
  The pro invokedynamic obfuscation check
   */

  private final List<String> classes = new ArrayList<>();

  @Override
  public void check(Plugin plugin) {
    classes.clear();
    plugin.getClasses().forEach(classNode -> {
      AtomicInteger invokeDynamic = new AtomicInteger();
      AtomicInteger invoke = new AtomicInteger();

      classNode.methods.stream()
          .flatMap(methodNode -> Arrays.stream(methodNode.instructions.toArray()))
          .filter(node -> node instanceof InvokeDynamicInsnNode || node instanceof MethodInsnNode
              || node instanceof FieldInsnNode)
          .forEach(node -> {
            if (node instanceof InvokeDynamicInsnNode) {
              invokeDynamic.getAndIncrement();
            } else {
              invoke.getAndIncrement();
            }
          });

      if (NumberHelper.percentage(invokeDynamic.get(), invoke.get()) > 30 || (invokeDynamic.get()
          > invoke.get())) {
        classes.add(classNode.name);
      }
    });

    if (!classes.isEmpty()) {//bro wtf is that xd
      plugin.addLog(
          "Detected InvokeDynamicObfuscation in classes: \n[\n" + String.join("\n", classes)
              + "\n]");
    }
  }
}
