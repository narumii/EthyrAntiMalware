package xyz.ethyr.antimalware.check.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import xyz.ethyr.antimalware.AntiMalware.Plugin;
import xyz.ethyr.antimalware.check.Check;
import xyz.ethyr.antimalware.helper.ASMHelper;

public class StringObfuscationCheck implements Check {

  /*
  I don't even know what i done here
   */

  private final List<String> classes = new ArrayList<>();

  @Override
  public void check(Plugin plugin) {
    AtomicBoolean found = new AtomicBoolean();

    classes.clear();
    plugin.getClasses().forEach(classNode -> {
      AtomicInteger encrypted = new AtomicInteger();

      classNode.methods.stream()
          .flatMap(methodNode -> Arrays.stream(methodNode.instructions.toArray()))
          .filter(ASMHelper::isStringus)
          .map(ASMHelper::getStringus)
          .forEach(string -> {
            if (string.length() <= 0) {
              return;
            }

            if (string.length() > 512) {
              encrypted.getAndIncrement();
            }

            char[] chars = string.toCharArray();
            int utf = 0;

            for (char c : chars) {
              if (c > 127 && c != 'ยง') {
                utf++;
              }
            }

            if (ASMHelper.percentage(utf, string.length()) > 30) {
              encrypted.getAndIncrement();
            }

            found.getAndSet(true);
          });

      if (encrypted.get() > 0) {
        classes.add(classNode.name.replace("/", "."));
      }
    });

    if (!found.get()) {
      plugin.addLog(plugin.name + " No strings in plugin");
    }

    if (!classes.isEmpty()) {//bro wtf is that xd
      plugin.addLog(
          "Detected StringObfuscation in classes: \n[\n" + String.join("\n", classes) + "\n]");
    }
  }
}
