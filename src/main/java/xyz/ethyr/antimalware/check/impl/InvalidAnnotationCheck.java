package xyz.ethyr.antimalware.check.impl;

import java.util.ArrayList;
import java.util.List;
import org.objectweb.asm.tree.AnnotationNode;
import org.objectweb.asm.tree.ClassNode;
import xyz.ethyr.antimalware.AntiMalware.Plugin;
import xyz.ethyr.antimalware.check.Check;

public class InvalidAnnotationCheck implements Check {

  //The pro
  private final List<String> classes = new ArrayList<>();

  @Override
  public void check(Plugin plugin) {
    classes.clear();
    plugin.getClasses().forEach(classNode -> {
      checkAnnotations(classNode, classNode.visibleAnnotations);
      checkAnnotations(classNode, classNode.invisibleAnnotations);

      classNode.methods.forEach(methodNode -> {
        checkAnnotations(classNode, methodNode.visibleAnnotations);
        checkAnnotations(classNode, methodNode.invisibleAnnotations);
      });

      classNode.fields.forEach(fieldNode -> {
        checkAnnotations(classNode, fieldNode.visibleAnnotations);
        checkAnnotations(classNode, fieldNode.invisibleAnnotations);
      });
    });

    if (!classes.isEmpty()) {//bro wtf is that xd
      plugin.addLog(
          "Detected Invalid Annotations in classes: \n[\n" + String.join("\n", classes)
              + "\n]");
    }
  }

  private void checkAnnotations(ClassNode classNode, List<AnnotationNode> annotationNodes) {
    if (annotationNodes == null || annotationNodes.isEmpty())
      return;

    if (!classes.contains(classNode.name) && annotationNodes.stream().anyMatch(annotationNode -> (!annotationNode.desc.startsWith("L") && !annotationNode.desc.endsWith(";")) || (annotationNode.desc.contains(" ") || annotationNode.desc.contains("\n")))) {
      classes.add(classNode.name);
    }
  }
}
